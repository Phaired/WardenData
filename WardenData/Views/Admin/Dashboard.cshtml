@model List<WardenData.Models.User>
@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>üëã Bonjour @Context.Session.GetString("AdminUsername")</h1>
    <div style="display: flex; gap: 1rem;">
        <button class="btn btn-warning" onclick="showPasswordModal()">
            üîê Changer mot de passe
        </button>
        <form method="post" asp-action="Logout" style="display: inline;">
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-secondary">
                üö™ D√©connexion
            </button>
        </form>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <h2>üë• Gestion des Utilisateurs</h2>
            <button class="btn btn-success" onclick="showCreateModal()">
                ‚ûï Nouvel Utilisateur
            </button>
        </div>
    </div>
    <div class="card-body">
        @if (Model.Any())
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nom d'utilisateur</th>
                        <th>R√¥le</th>
                        <th>Statut</th>
                        <th>Cr√©√© le</th>
                        <th>Token</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model)
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>@user.Username</td>
                            <td>
                                @if (user.Role == UserRole.Admin)
                                {
                                    <span class="badge badge-danger">Admin</span>
                                }
                                else
                                {
                                    <span class="badge badge-primary">User</span>
                                }
                            </td>
                            <td>
                                @if (user.IsActive)
                                {
                                    <span class="badge badge-success">Actif</span>
                                }
                                else
                                {
                                    <span class="badge badge-danger">Inactif</span>
                                }
                            </td>
                            <td>@user.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                            <td>
                                <code style="font-size: 0.8rem; background: #f8f9fa; padding: 0.25rem;">
                                    @(user.Token)
                                </code>
                            </td>
                            <td>
                                <button class="btn btn-secondary" style="margin-right: 0.5rem; font-size: 0.8rem;"
                                        onclick="regenerateToken(@user.Id)">
                                    üîÑ Token
                                </button>
                                <button class="btn btn-danger" style="font-size: 0.8rem;"
                                        onclick="deleteUser(@user.Id, '@user.Username')">
                                    üóëÔ∏è Supprimer
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="alert alert-info">
                Aucun utilisateur trouv√©. Cr√©ez le premier utilisateur !
            </div>
        }
    </div>
</div>

<!-- Modal Cr√©ation Utilisateur -->
<div id="createModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 2rem; border-radius: 10px; width: 400px;">
        <h3 style="margin-bottom: 1.5rem;">‚ûï Cr√©er un utilisateur</h3>
        <form id="createForm">
            <div class="form-group">
                <label class="form-label">Nom d'utilisateur</label>
                <input type="text" class="form-control" id="createUsername" required>
            </div>
            <div class="form-group">
                <label class="form-label">Mot de passe</label>
                <input type="password" class="form-control" id="createPassword" required minlength="6">
            </div>
            <div class="form-group">
                <label class="form-label">R√¥le</label>
                <select class="form-control" id="createRole">
                    <option value="0">User</option>
                    <option value="1">Admin</option>
                </select>
            </div>
            <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                <button type="submit" class="btn btn-success">Cr√©er</button>
                <button type="button" class="btn btn-secondary" onclick="hideCreateModal()">Annuler</button>
            </div>
        </form>
    </div>
</div>

<!-- Modal Changement de Mot de Passe -->
<div id="passwordModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 2rem; border-radius: 10px; width: 400px;">
        <h3 style="margin-bottom: 1.5rem;">üîê Changer le mot de passe</h3>
        <form id="passwordForm">
            <div class="form-group">
                <label class="form-label">Ancien mot de passe</label>
                <input type="password" class="form-control" id="oldPassword" required>
            </div>
            <div class="form-group">
                <label class="form-label">Nouveau mot de passe</label>
                <input type="password" class="form-control" id="newPassword" required minlength="6">
            </div>
            <div class="form-group">
                <label class="form-label">Confirmer le nouveau mot de passe</label>
                <input type="password" class="form-control" id="confirmPassword" required minlength="6">
            </div>
            <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                <button type="submit" class="btn btn-warning">Changer</button>
                <button type="button" class="btn btn-secondary" onclick="hidePasswordModal()">Annuler</button>
            </div>
        </form>
    </div>
</div>

<!-- Hidden antiforgery token for AJAX requests -->
@Html.AntiForgeryToken()

@section Scripts {
    <script>
        function getAntiForgeryToken() {
            return document.querySelector('input[name="__RequestVerificationToken"]').value;
        }

        function showCreateModal() {
            document.getElementById('createModal').style.display = 'block';
        }

        function hideCreateModal() {
            document.getElementById('createModal').style.display = 'none';
            document.getElementById('createForm').reset();
        }

        function showPasswordModal() {
            document.getElementById('passwordModal').style.display = 'block';
        }

        function hidePasswordModal() {
            document.getElementById('passwordModal').style.display = 'none';
            document.getElementById('passwordForm').reset();
        }

        document.getElementById('createForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const username = document.getElementById('createUsername').value;
            const password = document.getElementById('createPassword').value;
            const role = parseInt(document.getElementById('createRole').value);

            try {
                const formData = new FormData();
                formData.append('__RequestVerificationToken', getAntiForgeryToken());
                formData.append('username', username);
                formData.append('password', password);
                formData.append('role', role);

                const response = await fetch('/Admin/CreateUser', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    location.reload();
                } else {
                    const error = await response.text();
                    alert('Erreur: ' + error);
                }
            } catch (error) {
                alert('Erreur: ' + error.message);
            }
        });

        async function regenerateToken(userId) {
            if (!confirm('Voulez-vous vraiment r√©g√©n√©rer le token ? L\'ancien ne fonctionnera plus.')) return;

            try {
                const formData = new FormData();
                formData.append('__RequestVerificationToken', getAntiForgeryToken());
                formData.append('id', userId);

                const response = await fetch('/Admin/RegenerateToken', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const result = await response.json();
                    alert('Nouveau token g√©n√©r√©: ' + result.Token);
                    location.reload();
                } else {
                    alert('Erreur lors de la r√©g√©n√©ration du token');
                }
            } catch (error) {
                alert('Erreur: ' + error.message);
            }
        }

        async function deleteUser(userId, username) {
            if (!confirm(`Voulez-vous vraiment supprimer l'utilisateur "${username}" ?`)) return;

            try {
                const formData = new FormData();
                formData.append('__RequestVerificationToken', getAntiForgeryToken());
                formData.append('id', userId);

                const response = await fetch('/Admin/DeleteUser', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert('Erreur lors de la suppression');
                }
            } catch (error) {
                alert('Erreur: ' + error.message);
            }
        }

        document.getElementById('passwordForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const oldPassword = document.getElementById('oldPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            if (newPassword !== confirmPassword) {
                alert('Les nouveaux mots de passe ne correspondent pas');
                return;
            }

            try {
                const formData = new FormData();
                formData.append('__RequestVerificationToken', getAntiForgeryToken());
                formData.append('oldPassword', oldPassword);
                formData.append('newPassword', newPassword);

                const response = await fetch('/Admin/ChangePassword', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    alert('Mot de passe chang√© avec succ√®s');
                    hidePasswordModal();
                } else {
                    const error = await response.text();
                    alert('Erreur: ' + error);
                }
            } catch (error) {
                alert('Erreur: ' + error.message);
            }
        });

        // Close modals on outside click
        document.getElementById('createModal').addEventListener('click', (e) => {
            if (e.target.id === 'createModal') {
                hideCreateModal();
            }
        });

        document.getElementById('passwordModal').addEventListener('click', (e) => {
            if (e.target.id === 'passwordModal') {
                hidePasswordModal();
            }
        });
    </script>
}