// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WardenData.Models;

#nullable disable

namespace WardenData.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250918215622_NormalizeJsonData")]
    partial class NormalizeJsonData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WardenData.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_orders_name");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WardenData.Models.OrderEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("DesiredValue")
                        .HasColumnType("bigint")
                        .HasColumnName("desired_value");

                    b.Property<string>("EffectName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("effect_name");

                    b.Property<long>("MaxValue")
                        .HasColumnType("bigint")
                        .HasColumnName("max_value");

                    b.Property<long>("MinValue")
                        .HasColumnType("bigint")
                        .HasColumnName("min_value");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderEffects");
                });

            modelBuilder.Entity("WardenData.Models.RuneHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EffectsAfter")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("effects_after");

                    b.Property<bool>("HasSucceed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("has_succeed");

                    b.Property<bool>("HasSynchronized")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("has_synchronized");

                    b.Property<bool>("IsTenta")
                        .HasColumnType("boolean")
                        .HasColumnName("is_tenta");

                    b.Property<int>("RuneId")
                        .HasColumnType("integer")
                        .HasColumnName("rune_id");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("RuneHistories");
                });

            modelBuilder.Entity("WardenData.Models.RuneHistoryEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("CurrentValue")
                        .HasColumnType("bigint")
                        .HasColumnName("current_value");

                    b.Property<string>("EffectName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("effect_name");

                    b.Property<int>("RuneHistoryId")
                        .HasColumnType("integer")
                        .HasColumnName("rune_history_id");

                    b.HasKey("Id");

                    b.HasIndex("RuneHistoryId");

                    b.ToTable("RuneHistoryEffects");
                });

            modelBuilder.Entity("WardenData.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("InitialEffects")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("initial_effects");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<string>("RunesPrices")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("runes_prices");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("WardenData.Models.SessionEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("CurrentValue")
                        .HasColumnType("bigint")
                        .HasColumnName("current_value");

                    b.Property<string>("EffectName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("effect_name");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionEffects");
                });

            modelBuilder.Entity("WardenData.Models.SessionRunePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<int>("RuneId")
                        .HasColumnType("integer")
                        .HasColumnName("rune_id");

                    b.Property<string>("RuneName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rune_name");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionRunePrices");
                });

            modelBuilder.Entity("WardenData.Models.OrderEffect", b =>
                {
                    b.HasOne("WardenData.Models.Order", "Order")
                        .WithMany("OrderEffects")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_effects_orders");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("WardenData.Models.RuneHistory", b =>
                {
                    b.HasOne("WardenData.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rune_histories_sessions");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("WardenData.Models.RuneHistoryEffect", b =>
                {
                    b.HasOne("WardenData.Models.RuneHistory", "RuneHistory")
                        .WithMany("RuneHistoryEffects")
                        .HasForeignKey("RuneHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rune_history_effects_rune_histories");

                    b.Navigation("RuneHistory");
                });

            modelBuilder.Entity("WardenData.Models.Session", b =>
                {
                    b.HasOne("WardenData.Models.Order", "Order")
                        .WithMany("Sessions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sessions_orders");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("WardenData.Models.SessionEffect", b =>
                {
                    b.HasOne("WardenData.Models.Session", "Session")
                        .WithMany("SessionEffects")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_session_effects_sessions");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("WardenData.Models.SessionRunePrice", b =>
                {
                    b.HasOne("WardenData.Models.Session", "Session")
                        .WithMany("SessionRunePrices")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_session_rune_prices_sessions");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("WardenData.Models.Order", b =>
                {
                    b.Navigation("OrderEffects");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WardenData.Models.RuneHistory", b =>
                {
                    b.Navigation("RuneHistoryEffects");
                });

            modelBuilder.Entity("WardenData.Models.Session", b =>
                {
                    b.Navigation("SessionEffects");

                    b.Navigation("SessionRunePrices");
                });
#pragma warning restore 612, 618
        }
    }
}
